{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mastery JavaScript\\\\weather_app\\\\frontend\\\\src\\\\Weather.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Weather() {\n  _s();\n  const [lat, setLat] = useState('');\n  const [lon, setLon] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [manualLocation, setManualLocation] = useState(false);\n  const [city, setCity] = useState('');\n  const fetchWeatherByCity = () => {\n    if (!city.trim()) {\n      alert('Please enter a city name');\n      return;\n    }\n    setLoading(true);\n    fetch(`http://localhost:8000/weather?city=${encodeURIComponent(city)}`).then(response => response.json()).then(data => {\n      setWeatherData(data);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching weather data:', error);\n      setLoading(false);\n      alert('Could not fetch weather for this city. Please try again.');\n    });\n  };\n  const fetchWeather = () => {\n    setLoading(true);\n\n    // Get user's location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        setLat(latitude);\n        setLon(longitude);\n\n        // Fetch weather data\n        fetch(`http://localhost:8000/weather?lat=${latitude}&lon=${longitude}`).then(response => response.json()).then(data => {\n          setWeatherData(data);\n          setLoading(false);\n        }).catch(error => {\n          console.error('Error fetching weather data:', error);\n          setLoading(false);\n        });\n      }, error => {\n        console.error('Error getting location:', error);\n        setLoading(false);\n        // Instead of alert, switch to manual mode\n        setManualLocation(true);\n      });\n    } else {\n      // If geolocation not supported, switch to manual mode\n      setManualLocation(true);\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    className: \"Background\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"heading\",\n      children: \"Breeze\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-side\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: fetchWeather,\n        children: loading ? 'Loading...' : 'Get Weather'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(Weather, \"Zl/qSDAZw7oPudj0i39kYzlTiXQ=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Weather","_s","lat","setLat","lon","setLon","weatherData","setWeatherData","loading","setLoading","manualLocation","setManualLocation","city","setCity","fetchWeatherByCity","trim","alert","fetch","encodeURIComponent","then","response","json","data","catch","error","console","fetchWeather","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Mastery JavaScript/weather_app/frontend/src/Weather.js"],"sourcesContent":["import {useState} from 'react';\r\n\r\nfunction Weather() {\r\n    const [lat, setLat] = useState('');\r\n    const [lon, setLon] = useState('');\r\n    const [weatherData, setWeatherData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [manualLocation, setManualLocation] = useState(false);\r\n    const [city, setCity] = useState('');    const fetchWeatherByCity = () => {\r\n        if (!city.trim()) {\r\n            alert('Please enter a city name');\r\n            return;\r\n        }\r\n        \r\n        setLoading(true);\r\n        fetch(`http://localhost:8000/weather?city=${encodeURIComponent(city)}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setWeatherData(data);\r\n                setLoading(false);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching weather data:', error);\r\n                setLoading(false);\r\n                alert('Could not fetch weather for this city. Please try again.');\r\n            });\r\n    };\r\n\r\n    const fetchWeather = () => {\r\n        setLoading(true);\r\n        \r\n        // Get user's location\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    const latitude = position.coords.latitude;\r\n                    const longitude = position.coords.longitude;\r\n                    \r\n                    setLat(latitude);\r\n                    setLon(longitude);\r\n                    \r\n                    // Fetch weather data\r\n                    fetch(`http://localhost:8000/weather?lat=${latitude}&lon=${longitude}`)\r\n                        .then((response) => response.json())\r\n                        .then((data) => {\r\n                            setWeatherData(data);\r\n                            setLoading(false);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error('Error fetching weather data:', error);\r\n                            setLoading(false);\r\n                        });\r\n                },\r\n                (error) => {\r\n                    console.error('Error getting location:', error);\r\n                    setLoading(false);\r\n                    // Instead of alert, switch to manual mode\r\n                    setManualLocation(true);\r\n                }\r\n            );\r\n        } else {\r\n            // If geolocation not supported, switch to manual mode\r\n            setManualLocation(true);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return(\r\n        <body className = \"Background\">\r\n            <h1 className = \"heading\">Breeze</h1>\r\n            <div className = \"left-side\">\r\n                <button className = \"button\" onClick={fetchWeather}>\r\n                    {loading ? 'Loading...' : 'Get Weather'}\r\n                </button>\r\n            </div>\r\n        \r\n        \r\n        </body>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Weather;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}